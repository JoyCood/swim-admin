<?php !defined('YOUNG_TEAM') AND exit('Access Denied!');
class ModelUserMain {
    const USER_TYPE_ADMIN    = 0;
    const USER_TYPE_YONGGUAN = 1;
    const USER_TYPE_JIAOLIAN = 2;
    const USER_TYPE_SHENHUXI = 3; 
    const USER_TYPE_CAIWU    = 4;

    static $privileges = array(
        self::USER_TYPE_ADMIN => array(
            'options' => array(
                self::USER_TYPE_YONGGUAN => '泳馆',
                self::USER_TYPE_JIAOLIAN => '教练',
                self::USER_TYPE_SHENHUXI => '深呼吸',
            ), 
        ),

        //泳馆权限
        self::USER_TYPE_YONGGUAN => array(
            'privilege' => array(
                'users' => array(PERM_READ, PERM_ADD, PERM_EDIT, PERM_DELETE),
                'orders' => array(PERM_READ, PERM_ALLOCATE_TEACHER)
            ),
            'options' => array(
                self::USER_TYPE_JIAOLIAN => '教练'
            ),
        ),
        
        //教练权限
        self::USER_TYPE_JIAOLIAN => array(
            'text' => '教练',
            'privilege' => array(
                'orders' => array(PERM_READ, PERM_CLOCK)
            )
        ),

        //深呼吸权限
        self::USER_TYPE_SHENHUXI => array(
            'privilege' => array(
                'users' => array(PERM_READ, PERM_ADD, PERM_EDIT, PERM_DELETE),
                'orders' => array(PERM_READ, PERM_REFUND, PERM_ALLOCATE_TEACHER, PERM_ALLOCATE_YONGGUAN)
            ),
            'options' => array(
                self::USER_TYPE_YONGGUAN => '场馆', 
                self::USER_TYPE_JIAOLIAN => '教练'
            ),
        ),

        //财务权限
        self::USER_TYPE_CAIWU => array(
            'text' => '财务',
            'privilege' => array(
                'orders' => array(PERM_READ, PERM_REFUND),
                'finance' => array(PERM_READ, PERM_ADD, PERM_EDIT),
            ) 
        )
    );

	private $fields = array(
		'username'		=> '',	 	// 用户名
		'password'		=> '', 		// 密码
		'name'			=> '',		// 姓名
		'active'		=> true,	// 状态: true 可用， false 停用
		'last_login'	=> 0,		// 最后登录时间
		'last_ip'		=> '',		// 最后登录IP
		'group'			=> 0,		// 所属组
		'type'          => 0,       // 帐户类型：1商户
        'privilege'     => 0,       // 权限
	);

	public function collection() {
		return SwimAdmin::db('admin');
	}

	public function addUser($user) {
		$admin 	= $this->collection();
		$user 	= SwimAdmin::combine($this->fields, $user);
		$user = Helper::allowed($user, array_keys($this->fields));
        $user['created_by'] = empty($_SESSION[S_USER])?'system': $_SESSION[S_USER];
        $user['created_on'] = time();
		$admin->insert($user);

		$user['id'] = (string)$user['_id'];
		unset($user['_id']);

		return $user;
	}

	public function update($data, $id) {
        $collection = $this->collection();
        $id = new MongoId($id);
        $data = Helper::allowed($data, array_keys($this->fields));
        $data['modified_by'] = $_SESSION[S_USER];
        $data['modified_on'] = time();
        $result = $collection->update(array('_id' => $id), array('$set' => $data));
        return $result;
    }

	public function deleteById($ids) {
        $ids = (array)$ids;
        for($idx=0, $l=sizeof($ids); $idx<$l; $idx++) {
            $ids[$idx] = new MongoId($ids[$idx]);
        }
        $collection = $this->collection();
        $result = $collection->remove(array(
            '_id' => array('$in' => $ids),
            'username' => array('$ne'=>'admin')
        ));
        return $result;
    }

	public function changePassword($username, $password) {
		$collection = $this->collection();
		return $collection->update(array('username' => $username), array('$set' => array(
			'password' => $this->password($password)
		)));
	}

	public function getOneByName($username) {
		$collection = $this->collection();
	    $row = $collection->findOne(array('username' => $username));
	    return $row;
	}

	public function getOneById($id) {
		$collection = $this->collection();
	    $row = $collection->findOne(array('_id' => new MongoId($id)));
	    return $row;
	}

	public function pagination($url = '', $pnValue = null) {
        $params  = Helper::parseQueryString($url? $url: $_SERVER['REQUEST_URI']);
        $pn      = Helper::popValue($params, 'pn', 1);
        $sort    = Helper::popValue($params, 'sort', 'username');
        $order   = Helper::popValue($params, 'order', 1);
        $filters = array(
        	'username' => array('$ne' => 'admin'),  // admin 隐藏
        );
        if($_SESSION[S_USER]!='admin') { //admin显示全部用户
            $filters['created_by']=$_SESSION[S_USER];
        }
        $data = SwimAdmin::pagination(
            $url,
            $this->collection(),
            is_null($pnValue)? $pn: $pnValue,
            $filters,
            array('active' => -1, $sort => intval($order) > 0? 1: -1)
        );
        $data = $this->combineGroupName($data);
        return $data;
    }

    protected function combineGroupName($data) {
    	$items = array();
    	$gids  = array();
    	foreach($data['items'] as $item) {
    		if(isset($item['group']) && is_array($item['group'])) {
    			foreach($item['group'] as $gid) {
    				$gid = trim($gid);
    				if($gid) {
    					$gids[] = new MongoId($gid);
    				}
    			}
    		}
    	}

    	$groups = array();
    	if($gids) {
    		$group  = SwimAdmin::db('group');
    		$result = $group->find(array(
    			'_id' => array(
    				'$in' => $gids
    			)
    		));
    		foreach($result as $item) {
    			$gid = (string)$item['_id'];
    			$groups[$gid] = $item['name'];
    		}
    	}

    	foreach($data['items'] as $item) {
    		$item['groups'] = array();
    		if(isset($item['group']) && is_array($item['group'])) {
    			foreach($item['group'] as $gid) {
    				if(isset($groups[$gid])) {
    					$item['groups'][] = $groups[$gid];
    				}
    			}
    		}
    		$items[] = $item;
    	}
    	$data['items'] = $items;

    	return $data;
    }

	/**
	 * 生成加密密码
	 */
	public function password($password) {
		return md5('_swim_'. $password);
	}

	public function getUserByUsername($username) {
		$admin 	= SwimAdmin::db('admin');
		$user   = $admin->findOne(array('username' => $username));
		return $user;
	}
}
