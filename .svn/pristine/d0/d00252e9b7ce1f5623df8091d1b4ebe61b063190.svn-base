<?php !defined('YOUNG_TEAM') AND exit('Access Denied!');

class ModelCourseMain
{
	public $property = array(
	    array('id' => '1', 'name'=>'种类', 'values'=>array(
		    array('valud_id' => 1, 'value_name' => '不含教练学员门票'),
			array('value_id' => 2, 'value_name' => '含教练学员门票')
		)),
		array('id' => '2', 'name'=>'规格', 'values'=>array(
            array('value_id' => 1, 'value_name' => '1v1'),
	        array('value_id' => 2, 'value_name' => '1v2'),
	        array('value_id' => 3, 'value_name' => '1v3')		
		))
	);

    private $allowed = array(
        'title',
        'price',
        'price_subject',
		'sale_count',
        'training_time',
        'schedule',
        'teacher',
        'teacher_extra',
        'teacher_phone',
        'score',
        'cover',
        'cover_big',
        'cover_small',
        'photos',
        'statu',
        'extra',
        'contents',
        'belong',
        'space',
        'priority',
        'created_on',
        'created_by',
        'modified_on',
        'modified_by',
        'comments_counter'
    );

    /**
     * 返回collection
     *
     * @author joy.cood
     *
     * @return object
     */
    public function collection() {
        return SwimAdmin::db('course');
    }

    /**
     * 添加课程
     *
     * @author joy.cood
     *
     * @param $data  array
     *
     * @return false | string
     */
    public function insert($data) {
        $collection = $this->collection();
        $data['created_on'] = time();
        $data['created_by'] = $_SESSION[S_USER];
        $data = Helper::allowed($data, $this->allowed);
        $data['create_time'] = time();
        $result = $collection->insert($data);
        return $result;
    }

    /**
     * 修改资讯
     *
     * @author joy.cood
     *
     * @param $data  array
     * @param $id  string
     *
     * @return bool
     */
    public function update($data, $id) {
        $collection = $this->collection();
        $id = new MongoId($id);
        $data['modified_on'] = time();
        $data['modified_by'] = $_SESSION[S_USER];
        $data = Helper::allowed($data, $this->allowed);
        $result = $collection->update(array('_id' => $id), array('$set' => $data));
        return $result;
    }

    /**
     * 删除资讯
     *
     * @author joy.cood
     *
     * @param $id  string | array
     *
     * @return bool
     */
    public function deleteById($ids) {
        $ids = (array)$ids;
        for($idx=0, $l=sizeof($ids); $idx<$l; $idx++) {
            $ids[$idx] = new MongoId($ids[$idx]);
        }
        $collection = $this->collection();
        $result = $collection->remove(array(
            '_id' => array('$in' => $ids)
        ));
        return $result;
    }

    /**
     * 查询资讯
     *
     * @author joy.cood
     *
     * @param $params  array
     *
     * @return array
     */
    public function find($params = array()) {
        $collection = $this->collection();
        return $collection->find($params)->sort(array('create_time' => -1));
    }

    /**
     * 根据id查找
     *
     * @author joy.cood
     *
     * @param string $id
     *
     * @return false | array
     */
    public function findOneById($id)
    {
        try
        {
            $id = new MongoId($id);
            $matcher = array('_id' => $id);
            
            $collection = $this->collection();
            
            return $collection->findOne($matcher);
        }
        catch(MongoException $e)
        {

        }

        return FALSE;
    }
    public function detail($id) {
        return $this->collection()->findOne(array('_id' => new MongoId($id)));
    }

    /**
     * 分页查询
     * @param  $pn      integer 页码
     * @param  $filters array   过滤条件
     * @param  $sort    array   排序
     * @return array
     */
    public function pagination($url = '', $pnValue = null) {
        $params   = Helper::parseQueryString($url? $url: $_SERVER['REQUEST_URI']);
        $pn       = Helper::popValue($params, 'pn', 1);
        $sort     = Helper::popValue($params, 'sort', 'create_time');
        $type     = Helper::popValue($params, 'type', '');
        $order    = Helper::popValue($params, 'order', -1);
        $category = Helper::popValue($params, 'category');
        $filters  = array();
        if($category) {
            $filters['belong.cate_id'] = $category;
        }
        return SwimAdmin::pagination(
            $url,
            $this->collection(),
            is_null($pnValue)? $pn: $pnValue,
            $filters,
            array('priority' => -1, $sort => intval($order) > 0? 1: -1)
        );
    }
}
