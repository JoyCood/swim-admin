<?php !defined('YOUNG_TEAM') AND exit('Access Denied!');

$app->get('/tweet/index.html', function() use($app) {
	$tweet  = SwimAdmin::model('local.tweet.main');
	$tGroup = SwimAdmin::model('local.tweet.group');
	$data   = $tweet->pagination();
	$app->view()->addGlobal('_MOD', 'local');
	$app->view()->addGlobal('_Action', 'index');

	$app->render('local/tweet-index.html', array(
		'data'       => $data,
		'groups'     => $tGroup->findAll(),
		'Sections'   => $tGroup->getGroups(),
		'group_id'   => $app->request->get('group-id'),
		'tweet_type' => $app->request->get('tweet-type'),
		'title'      => $app->request->get('title')
	));
});

$app->get('/tweet/form.html', function() use($app) {
	$id = $app->request->get('id', '');
	$data = array(
		'create_time' => strtotime(date('Y-m-d H:i:s'))
	);
	if($id) {
		$tweet = SwimAdmin::model('local.tweet.main');
		$data = $tweet->collection()->findOne(array('_id' => new MongoId($id)));
	}
	if(!isset($data['contents']) || !$data['contents']) {
		$data['contents'] =array(
			array(
				'text' 		=> '', 
				'location' 	=> array(
					'address' 		=> '',
					'coordinates' 	=> array(),
					'type'			=> 'Point'
				),
				'photos' 	=> array()
			)
		);
	}

	$member = SwimAdmin::model('member.main');
	$filter['type'] = 2;
	$users  = $member->find($filter);

	$tweetGroup = SwimAdmin::model('local.tweet.group');
	$groups     = $tweetGroup->findAll();

	$tweetComment = SwimAdmin::model('local.tweet.comment');
	$comments     = $tweetComment->getComments($id);

	$author = array();
	if(isset($data['user_id']) && $data['user_id']) {
		$author = $member->findOneById($data['user_id']);
	}

	$app->render('local/tweet-form.html', array(
		'id' 	   => $id,
		'data' 	   => $data,
		'users'    => $users,
		'comments' => $comments,
		'author'   => $author,
		'groups'   => $groups
	));
});
$app->post('/tweet/form.html', function() use($app) {
	$tweet       = SwimAdmin::model('local.tweet.main');
	$tGroup      = SwimAdmin::model('local.tweet.group');
	$id          = $app->request->post('id', '');
	$time        = strtotime($app->request->post('create_time'));
	$photos      = $app->request->post('photos', array());
	$coordinates = explode(',', trim($app->request->post('coordinates', '')));
	$hot         = $app->request->post('hot', 0); //是否热帖(0否，1是)
	$top         = $app->request->post('top', 0); //是否置顶(0否，1置顶)
	$recommand   = $app->request->post('recommand', 0); //是否精华帖(0否, 是)
	$groupId     = $app->request->post('group_id'); //所属版块（对应tweet_group表中的_id值）
	$type        = $app->request->post('type'); //帖子所属类型（0泳圈 1公告）
	$content     = array(
		'title'     => trim($app->request->post('title')),
		'text' 		=> trim($app->request->post('text')), 
		'location' 	=> array(
			'address' 		=> trim($app->request->post('address')),
			'coordinates' 	=> array((float)$coordinates[0], isset($coordinates[1])? (float)$coordinates[1]: 0),
			'type'			=> 'Point'
		),
		'photos' 	=> array()
	);
	$sizeOfPhotos = $app->request->post('size_of_photos', array());
	$countPhoto   = count($photos);
	if($countPhoto > $tweet::MAX_PHOTO_NUM) {
		$photos = array_slice($photos, 0, $tweet::MAX_PHOTO_NUM);
		$app->response->headers->set('Photonum', join(':', array($countPhoto, $tweet::MAX_PHOTO_NUM)));
	}
	foreach($photos as $idx => $photo) {
		$size = explode(',', isset($sizeOfPhotos[$idx]) && $sizeOfPhotos[$idx]? $sizeOfPhotos[$idx]: '');
		$content['photos'][] = array(
			'big' => str_replace('/mid-', '/big-', $photo),
			'min' => $photo,
			'w'   => isset($size[0])? intval($size[0]): 0,
			'h'   => isset($size[1])? intval($size[1]): 0
		);
	}
	$doc = array(
		'hot'               => (int)$hot,
		'top'               => (int)$top,
		'recommand'         => (int)$recommand,
		'group_id'          => $groupId,
		'type'              => (int)$type,
		'content' 			=> $content,
		'create_time'		=> $time? $time: time(),
		'views_counter'		=> intval($app->request->post('views_counter')),
		'likes_counter' 	=> intval($app->request->post('likes_counter')),
		'comments_counter' 	=> intval($app->request->post('comments_counter')),
		'statu'				=> 0,
		'user_id'			=> trim($app->request->post('user_id'))
	);
	// if(!$doc['content']['text']) {
	// 	SwimAdmin::error('请输入内容。');
	// }
	if(!$doc['content']['title']) {
		SwimAdmin::error('请输入标题。');
	} else if(mb_strlen($doc['content']['title'], 'UTF8') > 35) {
		SwimAdmin::error('请标题不能多于35个字。');
	}
	if(!$groupId)
	{
		SwimAdmin::error('请选择对应的版块。');
	}
	if(!$type)
	{
		// SwimAdmin::error('请选择帖子的类型（公告还是普通帖子）');
	}
	if(!$id) {
		$tweet->insert($doc);
	} else {
		$tweet->update($doc, $id);
	}
	$params = Helper::parseQueryString($app->request->post('__url'));
	$app->render('local/tweet-list.html', array(
		'id'         => $id,
		'data'       => $tweet->pagination($app->request->post('__url')),
		'groups'     => $tGroup->getGroups(),
		'group_id'   => Helper::popValue($params, 'group-id'),
		'tweet_type' => Helper::popValue($params, 'tweet-type'),
		'title'      => Helper::popValue($params, 'title')
	));
});

$app->get('/tweet/recommand-form.html', function() use($app) {
	$Tweet   = SwimAdmin::model('local.tweet.main');
	$tweetId = trim($app->request->get('id'));
	$data    = $Tweet->findOneById($tweetId);
	$app->render('local/tweet-recommand-form.html', array(
		'data' => $data
	));
});
$app->post('/tweet/recommand-form.html', function() use($app) {
	$Tweet = SwimAdmin::model('local.tweet.main');
	$id    = trim($app->request->post('id'));
	$date  = strtotime(trim($app->request->post('date')));
	$photo = trim($app->request->post('photo'));
	$doc   = array(
		'title'  => trim($app->request->post('title')),
		'status' => intval($app->request->post('status')),
		'date'   => $date? $date: time(),
		'photo'  => $photo
	);
	if($Tweet->addRecommand($id, $doc)) {
		$doc['tweet_id'] = $id;
		$app->view->renderJSON($doc);
	} else {
		SwimAdmin::error('添加推荐失败。');
	}
});

$app->post('/tweet/comment.html', function() use($app) {
	$tweetComment = SwimAdmin::model('tweet.comment');
	$tweetId      = trim($app->request->post('tweetId'));
	$userId       = trim($app->request->post('userId'));
	$comment      = trim($app->request->post('comment'));
	$commentId    = trim($app->request->post('commentId'));
	$time    	  = strtotime(trim($app->request->post('time')));
	if($tweetId && $userId && $comment) {
		$replyUser = null;
		$content = array(
			'text' => $comment
		);
		if($commentId) {
			$detail = SwimAdmin::model('tweet.comment')->getMsg($commentId);
			if($detail) {
				$text = isset($detail['content']) && isset($detail['content']['text'])? $detail['content']['text']: '';
				$user = isset($detail['user'])? $detail['user']: array();
				$content['Replay_Comment_Text'] = array(
					'replyComment' => array(
						'content' => $text,
						'id'      => isset($detail['id'])? $detail['id']: ''
					),
					'replyUser'   => array(
						'nick'      => isset($user['nick'])? $user['nick']: '',
						'id'    => isset($detail['user_id'])? $detail['user_id']: ''
					)
				);
				$replyUser = isset($detail['user_id']) ? $detail['user_id'] : null;
			}
		}
		$res = $tweetComment->post($userId, $tweetId, $content, '', $time? $time: time());
		$tweet = SwimAdmin::model('tweet.main')->findOneById($tweetId);
		$msgModel = SwimAdmin::model('msg.main');
		
		if($tweet && $tweet['user_id'] != $userId) {
		    $msgModel->send($userId, $tweet['user_id'], $res['id'], ModelMsgMain::ACTION_TWEET_COMMENT, ModelMsgMain::BELONG_COMMENT);
		}
		if($tweet && $replyUser) {
		    $msgModel->send($userId, $replyUser, $res['id'], ModelMsgMain::ACTION_COMMENT_REPLY, ModelMsgMain::BELONG_COMMENT);
		}
	}
	$comments     = $tweetComment->getComments($tweetId);
	$count        = $tweetComment->getCommentCount($tweetId);
	$app->response->headers->set('comment-count', $count);
	$app->render('local/tweet-comment-list.html', array(
		'comments' => $comments
	));
});

$app->post('/tweet/comment-delete.html', function() use($app) {
	$tweetComment = SwimAdmin::model('local.tweet.comment');
	$commentId    = trim($app->request->post('commentId'));
	$comment      = $tweetComment->detail($commentId);
	$comments     = array();
	$count        = 0;
	if($comment) {
		$result = $tweetComment->deleteById($commentId);
		if($result) {
            //更新动态被评论数量
            SwimAdmin::model('local.tweet.main')->freshCommentCounter($comment['tweet_id'], -1);
        }
		$comments = $tweetComment->getComments($comment['tweet_id']);
		$count    = $tweetComment->getCommentCount($comment['tweet_id']);
	}
	$app->response->headers->set('comment-count', $count);
	$app->render('local/tweet-comment-list.html', array(
		'comments'     => $comments,
	));
});

# 删除动态
$app->post('/tweet/delete.html', function() use($app) {
	$tweet  = SwimAdmin::model('local.tweet.main');
	$tGroup = SwimAdmin::model('local.tweet.group');
	$items 	= $app->request->post('items', array());
	$params = Helper::parseQueryString($app->request->post('__url'));
	$tweet->deleteById($items);
	$app->render('local/tweet-list.html', array(
		'data'       => $tweet->pagination($app->request->post('__url')),
		'groups'     => $tGroup->getGroups(),
		'group_id'   => Helper::popValue($params, 'group-id'),
		'tweet_type' => Helper::popValue($params, 'tweet-type'),
		'title'      => Helper::popValue($params, 'title')
	));
});

$app->get('/tweet/group.html', function() use($app) {
	$app->view()->addGlobal('_MOD', 'local');
	$app->view()->addGlobal('_Action', 'group');

	$TGroup = SwimAdmin::model('local.tweet.group');
	$data   = $TGroup->pagination();

	$app->render('local/tweet-group-index.html', array(
		'data' => $data
	));
});

$app->get('/tweet/group-form.html', function() use($app) {
    $serviceArea = SwimAdmin::model('course.area');
    $cities = $serviceArea->find();

	$TGroup = SwimAdmin::model('local.tweet.group');
	$id     = trim($app->request->get('id'));
	$data   = $TGroup->findOneById($id);

	$app->render('local/tweet-group-form.html', array(
		'cities' => $cities,
		'data'  => $data
	));
});

$app->post('/tweet/group-form.html', function() use($app) {
	$TGroup = SwimAdmin::model('local.tweet.group');
	$id     = trim($app->request->post('id'));
	$doc    = array(
		'city'        => trim($app->request->post('city_id')),
		'title'       => trim($app->request->post('title')),
		'description' => trim($app->request->post('description')),
		'cover'       => trim($app->request->post('cover')),
		'priority'    => trim($app->request->post('priority')),
		'hot'         => trim($app->request->post('hot')),
		'member_num'  => intval($app->request->post('member_num')),
		'tweet_num'   => intval($app->request->post('tweet_num')),
		'statu'       => intval($app->request->post('statu'))
	);
	if($doc['priority'] === '') {
		$doc['priority'] = 100;
	} else {
		$doc['priority'] = intval($doc['priority']);
	}
	if(!$doc['title']) {
		SwimAdmin::error('请输入圈子名称。');
	}
	if(!$doc['city']) {
		SwimAdmin::error('请选择所属城市。');
	}
	if(empty($id)) {
		$TGroup->insert($doc);
	} else {
		$TGroup->update($doc, $id);
	}
	$data = $TGroup->pagination($app->request->post('__url'));
	$app->render('local/tweet-group-list.html', array(
		'data' => $data
	));
});

$app->post('/tweet/group-delete.html', function() use($app) {
	$TGroup = SwimAdmin::model('local.tweet.group');
	$items 	= $app->request->post('items', array());
	$TGroup->deleteById($items);
	$app->render('local/tweet-group-list.html', array(
		'data' => $TGroup->pagination($app->request->post('__url'))
	));
});

#$app->post('/tweet/group-recommand.html', function() use($app) {
#	$TGroup = SwimAdmin::model('local.tweet.group');
#	$items 	= $app->request->post('items', array());
#	$action = intval($app->request->post('recommand'));
#	if($action) {
#		$TGroup->insertRecommand($items);
#	} else {
#		$TGroup->deleteRecommandById($items);
#	}
#	$app->render('local/tweet-group-list.html', array(
#		'data' => $TGroup->pagination($app->request->post('__url'))
#	));
#});
