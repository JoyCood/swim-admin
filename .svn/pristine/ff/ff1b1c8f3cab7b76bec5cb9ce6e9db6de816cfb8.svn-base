<?php !defined('YOUNG_TEAM') AND exit('Access Denied!');

class ModelMatchList
{
    private $errMsg;
    private $allowed = array(
        'name', 
        'statu'
    );

    public function collection() {
        return SwimAdmin::db('match_list');
    }

    /**
     * 添加赛事分类
     *
     * @author joy.cood
     *
     * @param $data  array
     *
     * @return false | string
     */
    public function insert($data) {
        $collection = $this->collection();
        $data = Helper::allowed($data, $this->allowed);
        $result = $collection->insert($data);
        return $result;
    }

    /**
     * 修改赛事分类
     *
     * @author joy.cood
     *
     * @param $data  array
     * @param $id  string
     *
     * @return bool
     */
    public function update($data, $id) {
        $collection = $this->collection();
        $id = new MongoId($id);
        $data = Helper::allowed($data, $this->allowed);
        $result = $collection->update(array('_id' => $id), $data);
        return $result;
    }

    /**
     * 删除赛事分类
     *
     * @author joy.cood
     *
     * @param $id  string | array
     *
     * @return bool
     */
    public function deleteById($ids) {
        $ids = (array)$ids;
        for($idx=0, $l=sizeof($ids); $idx<$l; $idx++) {
            $ids[$idx] = new MongoId($ids[$idx]);
        }
        $collection = $this->collection();
        $result = $collection->remove(array(
            '_id' => array('$in' => $ids)
        ));
        return $result;
    }

    /**
     * 查询赛事分类
     *
     * @author joy.cood
     *
     * @param $params  array
     *
     * @return array
     */
     public function findAll() 
    {
        $groups = array();
        $query  = array('statu' => 1);
        $cursor = $this->collection()->find($query);
        $cursor->sort(array('create_time' => -1));
        foreach($cursor as $row) {
            $row['_id'] = (string)$row['_id'];
            $groups[]   = $row;
        }
        return $groups;
    } 
    public function findOneById($id)
    {
        try
        {
            $matcher = array('_id'=>new MongoId($id));

            return $this->collection()->findOne($matcher);
        }
        catch(MongoException $e)
        {
            return FALSE;
        }
    }
    public function pagination($url = '', $pnValue = null) {
        $params  = Helper::parseQueryString($url? $url: $_SERVER['REQUEST_URI']);
        $pn      = Helper::popValue($params, 'pn', 1);
        $order   = Helper::popValue($params, 'order', -1);
        $filters = array();

        $query = Helper::getValue($params, 'query', '');
        if($query) {
            $filters['title'] = new MongoRegex('/'.$query.'/');
        }

        $data = SwimAdmin::pagination($url, $this->collection(), is_null($pnValue)? $pn: $pnValue, $filters, array(
            'block'    => 1,
            'reg_time' => -1
        ));

        $ids     = array();
        $members = array();
        foreach($data['items'] as $item) {
            $item        = (array)$item;
            $item['_id'] = (string)$item['_id'];
            $ids[]       = $item['_id'];
            $members[]   = $item;
        }
        $recoCollection = SwimAdmin::db('member_recommand');
        $recommands     = array();
        $result         = $recoCollection->find(array('user_id' => array('$in' => $ids)));
        foreach($result as $item) {
            $recommands[$item['user_id']] = $item;
        }
        foreach($members as & $item) {
            $item['recommand'] = isset($recommands[$item['_id']])? $recommands[$item['_id']]: array();
        }
        $data['items'] = $members;

        $data['params'] = $params;

        return $data;
    }
}